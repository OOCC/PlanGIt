２０１７－０１－２３　２３：３８：１１


写一下关于几个寄存器的理解，也就是算是家庭作业了。

前面的启动ＧＤＢ打断点就不说了，就把那个有值的每个寄存器的意思简单注解一下。

(gdb) info reg
eax            0x0	0
ecx            0x0	0
edx            0x0	0
ebx            0x0	0
esp            0xff4	0xff4　　　　　　　　　　　（栈顶指针）
ebp            0x0	0x0　
esi            0x0	0
edi            0x0	0
eip            0xc	0xc　　　　　　　　　　　　　　　（下一个指令的偏移量）
eflags         0x202	[ IF ]　　　　　　　　　　　（不知道什么鬼）
cs             0x23	35                          （以下四个单独解释下）
ss             0x2b	43
ds             0x2b	43
es             0x2b	43
fs             0x0	0
gs             0x0	0

cs/ss/ds/es　这四个分段分别代表了，代码段，堆栈段（也就是栈段，栈也叫堆栈），数据段，额外段。分这四个段的意义是因为，当时８０８６的ＣＰＵ想寻址
２０位，但是地址总线只有１６位，显然就做不到。于是想了一个办法，把２０位的地址空间拆分成四个段，每个段１６位，加起来刚好２０位。然后刚刚说的四个寄
存器就是用来存储每个段的基地址（向左偏移４位，后面添四个０就是基地址了）。再配合前面的什么ｅｓｐ，ｅｉｐ就可以用了。

比如，esp+ss＝stack top（栈顶）, ebp+ss=stack anywhere（栈的任何位置，取决于ｅｂｐ存的栈的哪里）,eip+cs=下一条操作指令的位置。

这个分段设计确实很巧妙。

最后总结一下，这一切问题的根源就是，为啥当时数据总线只能是１６位，而地址总线可以设计得更宽？　